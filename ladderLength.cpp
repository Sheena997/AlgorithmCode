/*
127. 单词接龙
给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：

每次转换只能改变一个字母。
转换过程中的中间单词必须是字典中的单词。
说明:

如果不存在这样的转换序列，返回 0。
所有单词具有相同的长度。
所有单词只由小写字母组成。
字典中不存在重复的单词。
你可以假设 beginWord 和 endWord 是非空的，且二者不相同。
示例 1:

输入:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

输出: 5

解释: 一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog",
     返回它的长度 5。
示例 2:

输入:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

输出: 0

解释: endWord "cog" 不在字典中，所以无法进行转换。

来源：LeetCode
链接：https://leetcode-cn.com/problems/word-ladder/
*/
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        if(wordList.empty())
            return 0;
        unordered_set<string> wordDict;
        
        for(auto& e : wordList)
            wordDict.insert(e);
        
        if(wordDict.find(endWord) == wordDict.end())
            return 0;
        
        int res = 1;
        unordered_set<string> visited;
        queue<string> q;
        visited.insert(beginWord);
        
        q.push(beginWord);
        while(!q.empty())
        {
            int size = q.size();
            while(size--)
            {
                string curWord = q.front();
                q.pop();
                for(int i = 0; i < curWord.size(); ++i)
                {
                    string newWord = curWord;
                    for(char ch = 'a'; ch <= 'z'; ++ch)
                    {
                        newWord[i] = ch;
                        if(newWord == endWord)
                            return res + 1;
                        if(wordDict.find(newWord) != wordDict.end()
                        && visited.find(newWord) == visited.end())
                        {
                            q.push(newWord);
                            visited.insert(newWord);
                        }
                    }   
                }
            }
            ++res;
        }
        
        return 0;
    }
};