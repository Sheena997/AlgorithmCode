/*
343. 整数拆分
给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 
返回你可以获得的最大乘积。

示例 1:

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。
说明: 你可以假设 n 不小于 2 且不大于 58。

来源：LeetCode
链接：https://leetcode-cn.com/problems/integer-break/
*/
class Solution {
public:
    int integerBreak(int n) {
        vector<int> dp(n + 1, 0);
        dp[1] = 1;
        for(int i = 2; i < n + 1; ++i)
        {
            for(int j = i - 1; j >= 1; --j)
            {
                dp[i] = max(dp[i], dp[j] * (i - j)); //拆分为多个数的时候
                dp[i] = max(dp[i], j * (i - j)); //拆分为两个数的时候
            }
        }
        
        return dp[n];
    }
};

