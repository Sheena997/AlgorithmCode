<<<<<<< HEAD
/*
在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。
在接下来的一年里，你要旅行的日子将以一个名为?days?的数组给出
。每一项是一个从?1?到?365?的整数。

火车票有三种不同的销售方式：

一张为期一天的通行证售价为?costs[0] 美元；
一张为期七天的通行证售价为?costs[1] 美元；
一张为期三十天的通行证售价为?costs[2] 美元。
通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为
期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、
第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。
返回你想要完成在给定的列表?days?中列出的每一天的旅行所需要的最低消费。
示例 1：
输入：days = [1,4,6,7,8,20], costs = [2,7,15]
输出：11
解释： 
例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划：
在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。
在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。
在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。
你总共花了 $11，并完成了你计划的每一天旅行。
示例 2：
输入：days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
输出：17
解释：
例如，这里有一种购买通行证的方法，可以让你完成你的旅行计划： 
在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。
在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。 
你总共花了 $17，并完成了你计划的每一天旅行。
提示：
1 <= days.length <= 365
1 <= days[i] <= 365
days?按顺序严格递增
costs.length == 3
1 <= costs[i] <= 1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-cost-for-tickets
*/
class Solution {
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int last = days[days.size() - 1];
        vector<int> dp(last + 1, 0);
        int index = 0;
        for(int i = 1; i <= last; ++i)
        {
            if(i == days[index])
            {
                int ret = INT_MAX;
                int one = i - 1, seven = (i - 7 > 0) ? (i - 7) : 0, thirty = (i - 30 > 0) ? (i - 30) : 0;
                ret = min(dp[one] + costs[0], ret);
                ret = min(dp[seven] + costs[1], ret);
                ret = min(dp[thirty] + costs[2], ret);
                dp[i] = ret;
                ++index;
            }
            else 
            {
                dp[i] = dp[i - 1];
            }
        }
        
        return dp[last];
    }
};
=======
//函数指针是个假地址
//遍历链表的循环
int main()
{
	for(cur = head; cur; cur = cur->next)  
	{
		 
	}
 } 
 
//数字遍历：i完成了[a,b]之间的遍历
for(i = a; i <= b; i++)

//数组遍历：a[i]完成了a的下标在[0,size]之间的遍历
for(i = n; i < size; i++)

//数位遍历：i%s完成了数字n在s进制下每一位的遍历
for(i = n; i; i /=s)

//字符串遍历：str[i]完成了对字符串str的遍历
for(i = 0; str[i]; i++)

//容器遍历：迭代器p完成了对容器v的遍历
for(p = v.begin(); p != v.end; p++)
	



bfs
1）空队列
2）起点入队
3）top队列 作为当前位置
4）当前位置往后的所有走法 来的路不算
5）pop当前位置
6）重复 345 直到队列为空
第六个 未必队列空 如果找到了 也可以停下

  
>>>>>>> a22d719e731bdbcf26ed6b0e4a03f6bc6590a24f
